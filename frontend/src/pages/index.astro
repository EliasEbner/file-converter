---
import Layout from "../layouts/Layout.astro";
import Button from "../components/Button.astro";
import Select from "../components/Select.astro";
import Option from "../components/Option.astro";
import ProgressBar from "../components/ProgressBar.astro";

type KeyLabelPair = {
  key: string;
  label: string;
};

const fileExtensions: KeyLabelPair[] = [
  { key: "", label: "-- Select --" },
  { key: "mp3", label: "mp3" },
  { key: "mp4", label: "mp4" },
  { key: "jpg", label: "jpg" },
  { key: "png", label: "png" },
  { key: "webp", label: "webp" },
  { key: "webm", label: "webm" },
  { key: "wav", label: "wav" },
  { key: "gif", label: "gif" },
  { key: "mkv", label: "mkv" },
  { key: "mov", label: "mov" },
  { key: "avi", label: "avi" },
  { key: "wmv", label: "wmv" },
  { key: "aac", label: "aac" },
  { key: "opus", label: "opus" },
  { key: "wma", label: "wma" },
  { key: "bmp", label: "bmp" },
  { key: "tiff", label: "tiff" },
];
---

<Layout title="Mutatio">
  <section class="relative w-full h-full flex justify-center items-center">
    <div
      class="flex flex-col md:flex-row gap-8 sm:gap-10 md:gap-6 lg:gap-8 xl:gap-12 2xl:gap-16 items-center"
    >
      <!-- FILE UPLOAD -->
      <div class="flex flex-col items-center gap-4">
        <!-- UPLOAD AREA -->
        <div
          id="drop-area"
          class="hover:scale-105 aspect-video w-52 sm:w-68 px-8 md:w-50 lg:w-70 xl:w-90 lg:px-10 cursor-pointer duration-1000 ease-out border-dashed border-2 border-primary rounded-4xl bg-primary-transparent flex justify-center items-center"
        >
          <p id="drop-area-label" class="text-primary text-center">
            Drag and drop a file or click to upload
          </p>

          <!-- HIDDEN INPUT FOR FILE -->
          <input type="file" class="hidden" id="file-input" multiple="false" />
        </div>

        <!-- FILENAME ONCE UPLOADED -->
        <p
          id="file-name"
          class="hidden w-52 sm:w-68 px-8 md:w-50 lg:w-70 xl:w-90 text-center"
        >
        </p>
      </div>

      <!-- CHEVRON -->
      <ion-icon
        name="chevron-forward-outline"
        class="text-5xl hidden md:block text-font-secondary first-chevron duration-500 ease-in-out"
      ></ion-icon>
      <ion-icon
        name="chevron-down-outline"
        class="text-5xl md:hidden text-font-secondary first-chevron duration-500 ease-in-out"
      ></ion-icon>

      <!-- TARGET FILETYPE -->
      <div
        id="extension-select-container"
        class="flex flex-col items-center gap-4"
      >
        <Select disabled id="extension-select" label="Target filetype">
          {
            fileExtensions.map((fileExtension) => (
              <Option value={fileExtension.key}>{fileExtension.label}</Option>
            ))
          }
        </Select>

        <!-- CONVERT BUTTON -->
        <Button disabled id="convert-button">Convert</Button>
      </div>

      <!-- CHEVRON -->
      <ion-icon
        name="chevron-forward-outline"
        class="text-5xl hidden md:block text-font-secondary second-chevron duration-500 ease-in-out"
      ></ion-icon>
      <ion-icon
        name="chevron-down-outline"
        class="text-5xl md:hidden text-font-secondary second-chevron duration-500 ease-in-out"
      ></ion-icon>

      <!-- CONVERTED FILE -->
      <div class="w-fit">
        <Button id="download-converted-file-button" disabled>
          <div class="flex flex-row justify-center items-center gap-2">
            <ion-icon
              name="download-outline"
              class="text-2xl text-font-light mb-1"></ion-icon>
            <span> Download converted file </span>
          </div>
        </Button>
      </div>
    </div>
    <div
      id="conversion-progress-bar-container"
      class="absolute w-full justify-center items-center bottom-20 hidden"
    >
      <ProgressBar
        labelId="conversion-progress-bar-label"
        value="0"
        id="conversion-progress-bar"
      />
    </div>
  </section>
</Layout>

<!-- STYLE ---------------------------------------------------------------------------------------->

<style>
  .button-enabled {
    cursor: pointer;
  }

  .text-error {
    color: #ef4444;
  }

  .button-enabled:hover {
    transform: scale(110%);
  }

  .button-enabled:active {
    transform: scale(95%);
  }

  .button-disabled {
    opacity: 30%;
  }
</style>

<!-- SCRIPT --------------------------------------------------------------------------------------->

<script>
  const dropArea: HTMLDivElement | null = document.getElementById(
    "drop-area",
  ) as HTMLDivElement | null;
  const dropAreaLabel: HTMLParagraphElement | null = document.getElementById(
    "drop-area-label",
  ) as HTMLParagraphElement | null;
  const fileInput: HTMLInputElement | null = document.getElementById(
    "file-input",
  ) as HTMLInputElement | null;
  const extensionSelect: HTMLSelectElement | null = document.getElementById(
    "extension-select",
  ) as HTMLSelectElement | null;
  const extensionSelectContainer: HTMLDivElement | null =
    document.getElementById(
      "extension-select-container",
    ) as HTMLDivElement | null;
  const downloadConvertedFileButton: HTMLButtonElement | null =
    document.getElementById(
      "download-converted-file-button",
    ) as HTMLButtonElement | null;
  const convertButton: HTMLButtonElement | null = document.getElementById(
    "convert-button",
  ) as HTMLButtonElement | null;
  const conversionProgressBar: HTMLProgressElement | null =
    document.getElementById(
      "conversion-progress-bar",
    ) as HTMLProgressElement | null;
  const conversionProgressBarContainer: HTMLDivElement | null =
    document.getElementById(
      "conversion-progress-bar-container",
    ) as HTMLDivElement | null;
  const conversionProgressBarLabel: HTMLLabelElement | null =
    document.getElementById(
      "conversion-progress-bar-label",
    ) as HTMLLabelElement | null;
  const firstChevron: HTMLCollectionOf<Element> | null =
    document.getElementsByClassName(
      "first-chevron",
    ) as HTMLCollectionOf<Element> | null;
  const secondChevron: HTMLCollectionOf<Element> | null =
    document.getElementsByClassName(
      "second-chevron",
    ) as HTMLCollectionOf<Element> | null;

  if (dropArea) {
    // needed to make drag and drop work
    dropArea.ondragover = dropArea.ondragenter = function (event) {
      event.preventDefault();
    };
  }

  // triggered regardless of whether file is uploaded through
  // drag and drop or click to upload
  function onFileUpload(file: File | null) {
    if (
      dropArea &&
      dropAreaLabel &&
      extensionSelectContainer &&
      extensionSelect &&
      fileInput &&
      file &&
      convertButton &&
      firstChevron
    ) {
      dropAreaLabel.innerText = file.name;
      extensionSelect.disabled = false;
      extensionSelectContainer.classList.remove("opacity-30");
      for (const chevron of firstChevron) {
        chevron.classList.remove("text-font-secondary");
      }
    }
    extensionChangeHandler(null);
  }

  // only on drag and drop upload
  function dropAreaDropHandler(event: DragEvent) {
    event.preventDefault();

    if (event.dataTransfer?.items && event.dataTransfer.items.length !== 0) {
      const file = event.dataTransfer.items[0].getAsFile();
      onFileUpload(file);

      // this is weird but it doesn't work othewise trust me bro
      if (file && fileInput) {
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        fileInput.files = dataTransfer.files;
      }
    }
  }

  // only on click to upload
  function dropAreaClickHandler(_event: MouseEvent) {
    // manually trigger click event on hidden <input type="file" />
    fileInput?.dispatchEvent(new MouseEvent("click"));
  }

  // for upload with click: once uploaded change
  // the contents of the filename element
  function fileInputChangeHandler(_event: Event | null) {
    onFileUpload(fileInput?.files?.[0] ?? null);
  }

  function extensionChangeHandler(event: Event | null) {
    if (convertButton && extensionSelect) {
      if (extensionSelect.value !== "") {
        convertButton.disabled = false;
      } else {
        convertButton.disabled = true;
      }
    }
  }

  dropArea?.addEventListener("drop", dropAreaDropHandler);
  dropArea?.addEventListener("click", dropAreaClickHandler);
  fileInput?.addEventListener("change", fileInputChangeHandler);
  extensionSelect?.addEventListener("change", extensionChangeHandler);

  import { FFmpeg } from "@ffmpeg/ffmpeg";
  import { fetchFile, toBlobURL } from "@ffmpeg/util";

  let ffmpeg: FFmpeg | null = null;
  let currentDownload: { name: string; url: string } | null = null;

  async function getFFmpeg() {
    if (ffmpeg) {
      return ffmpeg;
    }
    console.log("Loading ffmpeg-core.js");

    ffmpeg = new FFmpeg();
    if (!ffmpeg.loaded) {
      try {
        const baseURL = "https://unpkg.com/@ffmpeg/core@0.12.6/dist/esm";
        await ffmpeg.load({
          coreURL: await toBlobURL(
            `${baseURL}/ffmpeg-core.js`,
            "text/javascript",
          ),
          wasmURL: await toBlobURL(
            `${baseURL}/ffmpeg-core.wasm`,
            "application/wasm",
          ),
        });
      } catch (error) {
        console.error("Error loading FFmpeg:", error);
        throw new Error("Failed to load FFmpeg");
      }
    }
    return ffmpeg;
  }

  async function convert() {
    if (convertButton) convertButton.disabled = true; // Disable button to prevent multiple clicks

    // Clear any previous download URL to prevent memory leaks
    if (currentDownload) {
      URL.revokeObjectURL(currentDownload.url);
      currentDownload = null;
      if (downloadConvertedFileButton) {
        downloadConvertedFileButton.parentElement?.classList.add("opacity-30");
        downloadConvertedFileButton.disabled = true;
      }
    }

    const inputFile = fileInput?.files?.[0];
    if (!inputFile) {
      alert("Couldn't read file properly. Please try again.");
      if (convertButton) convertButton.disabled = false; // Re-enable button if no file
      return;
    }

    // Reset and show the progress bar for the new conversion
    if (
      conversionProgressBarContainer &&
      conversionProgressBar &&
      conversionProgressBarLabel
    ) {
      conversionProgressBarContainer.classList.remove("hidden");
      conversionProgressBarContainer.classList.add("flex");
      conversionProgressBarLabel.innerText = "0%";
      conversionProgressBar.value = 0;
      // TODO: elias's styling magic
      // conversionProgressBarLabel.classList.remove("red-500");
    }

    try {
      const ffmpeg_inst = await getFFmpeg();

      ffmpeg_inst.on("log", ({ type, message }) => {
        console.log(`[${type}] ${message}`);
      });
      ffmpeg_inst.on("progress", ({ progress, time }) => {
        if (conversionProgressBar && conversionProgressBarLabel) {
          const progressPercent = Math.round(progress * 100);
          conversionProgressBar.value = progressPercent;
          conversionProgressBarLabel.innerText = `${progressPercent}%`;
        }
      });

      const newType = extensionSelect?.value;
      const outFileName = inputFile.name.replace(/\.[^/.]+$/, `.${newType}`);

      console.log(
        "Starting conversion to " + newType + " (" + outFileName + ")",
      );
      await ffmpeg_inst.writeFile(inputFile.name, await fetchFile(inputFile));

      await ffmpeg_inst.exec(["-i", inputFile.name, outFileName]);

      const data = await ffmpeg_inst.readFile(outFileName);
      ffmpeg_inst.deleteFile(inputFile.name);
      ffmpeg_inst.deleteFile(outFileName);
      console.log("Conversion completed.");

      conversionProgressBarContainer?.classList.remove("flex");
      conversionProgressBarContainer?.classList.add("hidden");

      if (downloadConvertedFileButton && secondChevron) {
        downloadConvertedFileButton.disabled = false;
        for (const chevron of secondChevron) {
          chevron.classList.remove("text-font-secondary");
        }
      }

      currentDownload = {
        name: outFileName,
        url: URL.createObjectURL(new Blob([data.buffer])),
      };
      downloadConvertedFileButton?.parentElement?.classList.remove(
        "opacity-30",
      );
    } catch (error) {
      console.error("An error occurred during conversion:", error);
      if (conversionProgressBarLabel) {
        conversionProgressBarLabel.innerText =
          "Conversion failed. Unsupported format or file error.";
        // TODO: elias's styling magic
        // conversionProgressBarLabel.classList.add("red-500");
      }
      // should the progress bar remain visible when showing the error message?
    } finally {
      // Re-enable the convert button so the user can try again.
      if (convertButton) convertButton.disabled = false;
    }
  }

  convertButton?.addEventListener("click", convert);

  downloadConvertedFileButton?.addEventListener("click", () => {
    if (currentDownload) {
      const link = document.createElement("a");
      link.href = currentDownload.url;
      link.download = currentDownload.name;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  });

  fileInputChangeHandler(null);
</script>
